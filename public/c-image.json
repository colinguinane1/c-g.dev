{
  "name": "c-image",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "dialog",
    "drawer"
  ],
  "dependencies": [
    "lucide-react",
    "@radix-ui/themes",
    "sonner",
    "react-icons/bs"
  ],
  "devDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {}
        }
      }
    }
  },
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "c-image.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Clipboard, Download } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { useEffect, useState } from \"react\";\nimport { BsThreeDots } from \"react-icons/bs\";\nimport { toast } from \"sonner\";\nimport { Spinner } from \"@radix-ui/themes\"\nimport { Dialog, DialogClose, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Drawer, DrawerClose, DrawerContent, DrawerTrigger } from \"@/components/ui/drawer\";\n\ninterface CImageProps {\n  src: string;\n  pause?: boolean;\n  hide?: boolean;\n  children?: React.ReactNode;\n  skeleton?: boolean;\n  cache?: boolean;\n  dropdown?: boolean;\n  loadingIndicator?: boolean;\n  alt?: string;\n  width?: number;\n  layout?: \"fill\" | \"responsive\" | \"fixed\" | \"intrinsic\";\n  height?: number;\n  className?: string;\n  style?: object;\n  delay?: number;\n}\n\nconst CImage: React.FC<CImageProps> = ({\n  children,\n  src,\n  alt = \"image\",\n  hide,\n  pause = false,\n  cache = true,\n  skeleton = true,\n  loadingIndicator = false,\n  dropdown = false,\n  className,\n  layout,\n  width = 500,\n  height = 500,\n  delay,\n  style = {},\n}) => {\n  const [loaded, setLoaded] = useState(skeleton ? false : true);\n  const [imageHidden, setImageHidden] = useState(hide ? true : false);\n\n  useEffect(() => {\n    const img = new window.Image();\n    img.src = src;\n    if (img.complete && cache && !pause) {\n      setLoaded(true);\n    }\n  }, []);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(`https://c-g.dev${src}`);\n    toast.success(\"Link Copied to Clipboard\");\n  };\n\n  return (\n    <div className=\"relative\">\n      {!loaded && skeleton && (\n        <div className=\"absolute inset-0 rounded-lg transition-all shadow-2xl flex justify-center items-center animate-pulse bg-card shimmer\">\n          {loadingIndicator && (\n            <div className=\"z-20\"> <Spinner/></div>\n         \n          )}\n        </div>\n      )}\n      {loaded && imageHidden && (\n        <div\n          className={`backdrop-blur-3xl grid place-content-center absolute w-full h-full rounded-lg z-10 overflow-hidden transition-opacity duration-500 ${\n            imageHidden ? \"opacity-100\" : \"opacity-0\"\n          }`}\n        >\n          <Button variant={\"ghost\"} onClick={() => setImageHidden(false)}>\n            Unhide\n          </Button>\n        </div>\n      )}\n      <Image\n        src={src}\n        alt={alt}\n        layout={layout}\n        width={width}\n        height={height}\n        quality={100}\n        onLoadingComplete={() => {\n          if (delay && !pause) {\n            setTimeout(() => setLoaded(true), delay);\n          } else {\n            if (!pause) {\n              setLoaded(true);\n            }\n          }\n        }}\n        style={style}\n        className={`${className} rounded-lg z-0  transition-opacity duration-500 ${\n          loaded ? \"opacity-100\" : \"opacity-0\"\n        }`}\n      />\n\n      {children && loaded && (\n        <div className=\"absolute bottom-2 left-2 p-2 \">{children}</div>\n      )}\n      {loaded && dropdown && (\n        <div className=\"absolute bottom-2  right-2\">\n\n          <div className=\"hidden md:block\"><Dialog><DialogTrigger> <Button variant=\"ghost\" size=\"icon\">\n                <BsThreeDots size={20} />\n              </Button></DialogTrigger><DialogContent className=\"w-fit\">  <div className=\"flex items-start w-fit flex-col\">\n                <DialogClose>\n                  <a download={src} href={src}>\n                    <Button\n                      onClick={() => toast.success(\"Download Started\")}\n                      className=\"w-full\"\n                      variant=\"ghost\"\n                    >\n                      <Download size={15} />\n                      Download Image\n                    </Button>\n                  </a>\n                </DialogClose>\n                <DialogClose className=\"\">\n                  <Button\n                    onClick={handleCopy}\n                    className=\"w-full\"\n                    variant=\"ghost\"\n                  >\n                    <Clipboard size={15} />\n                    Copy Link\n                  </Button>\n                </DialogClose>\n              </div></DialogContent></Dialog></div>\n              <div className=\"md:hidden\"><Drawer><DrawerTrigger><Button variant=\"ghost\" size=\"icon\">\n                <BsThreeDots size={20} />\n              </Button></DrawerTrigger><DrawerContent className=\"h-fit pb-4 \">\n                <div className=\"flex items-start flex-col px-4 pt-4 gap-2\">  <DrawerClose>\n                  <a download={src} href={src}>\n                    <Button\n                      onClick={() => toast.success(\"Download Started\")}\n                      className=\"w-full\"\n                      variant=\"ghost\"\n                    >\n                      <Download size={15} />\n                      Download Image\n                    </Button>\n                  </a>\n                </DrawerClose>\n                <DrawerClose className=\"\">\n                  <Button\n                    onClick={handleCopy}\n                    className=\"w-full\"\n                    variant=\"ghost\"\n                  >\n                    <Clipboard size={15} />\n                    Copy Link\n                  </Button>\n                </DrawerClose></div> </DrawerContent></Drawer></div>\n      \n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CImage;\n",
      "type": "registry:ui"
    }
  ]
}
{
  "name": "stack-card",
  "type": "registry:ui",
  "registryDependencies": [
    "tooltip"
  ],
  "dependencies": [
    "react-icons"
  ],
  "devDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {}
        }
      }
    }
  },
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "stack-card.tsx",
      "content": "import {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { Database } from \"lucide-react\";\nimport { BiLogoPostgresql } from \"react-icons/bi\";\nimport { DiMongodb } from \"react-icons/di\";\nimport { FaAngular, FaNodeJs, FaReact } from \"react-icons/fa\";\nimport { IoLogoJavascript, IoLogoFirebase } from \"react-icons/io5\";\nimport { RiNextjsFill } from \"react-icons/ri\";\nimport { RiSupabaseFill } from \"react-icons/ri\";\nimport { SiTypescript, SiExpress } from \"react-icons/si\";\n\nconst iconSize = 18;\n\ninterface StackCardProps {\n  tech: string;\n  key: string;\n  className?: string;\n  ghost?: boolean;\n  showLabel?: boolean;\n  showDescription?: boolean;\n  size?: \"sm\" | \"md\";\n}\n\nconst StackCard: React.FC<StackCardProps> = ({\n  tech,\n  showLabel = false,\n  className,\n  ghost = false,\n  showDescription = false,\n  size = \"md\",\n}) => {\n  const Skills = [\n    {\n      label: \"PostgreSQL\",\n      color: ghost ? \"128, 128, 128\" : \"100, 149, 237\",\n      icon: (\n        <BiLogoPostgresql\n          size={iconSize}\n          color={ghost ? \"gray\" : \"CornflowerBlue\"}\n        />\n      ),\n      description: \"Structured Database\",\n    },\n    {\n      label: \"Supabase\",\n      color: ghost ? \"128, 128, 128\" : \"0, 255, 0\",\n      icon: (\n        <RiSupabaseFill size={iconSize} color={ghost ? \"gray\" : \"Chartreuse\"} />\n      ),\n      description: \"Backend Service\",\n    },\n    {\n      label: \"TypeScript\",\n      color: ghost ? \"128, 128, 128\" : \"50, 100, 255\",\n      icon: (\n        <SiTypescript\n          size={iconSize}\n          color={ghost ? \"gray\" : \"rgb(50,200,255)\"}\n        />\n      ),\n      description: \"JavaScript with type safety.\",\n    },\n    {\n      label: \"MongoDB\",\n      color: ghost ? \"128, 128, 128\" : \"0, 128, 0\",\n      icon: <DiMongodb size={iconSize} color={ghost ? \"gray\" : \"green\"} />,\n      description: \"NoSQL Database\",\n    },\n    {\n      label: \"Express\",\n      color: ghost ? \"128, 128, 128\" : \"128, 128, 128\",\n      icon: <SiExpress size={iconSize} color={ghost ? \"gray\" : \"gray\"} />,\n      description: \"Node.js Framework\",\n    },\n    {\n      label: \"Node.js\",\n      color: ghost ? \"128, 128, 128\" : \"0, 128, 0\",\n      icon: <FaNodeJs size={iconSize} color={ghost ? \"gray\" : \"green\"} />,\n      description: \"Server language\",\n    },\n    {\n      label: \"JavaScript\",\n      color: ghost ? \"128, 128, 128\" : \"245, 167, 39\",\n      icon: (\n        <IoLogoJavascript size={iconSize} color={ghost ? \"gray\" : \"orange\"} />\n      ),\n      description: \"Programming Language\",\n    },\n    {\n      label: \"Firebase\",\n      color: ghost ? \"128, 128, 128\" : \"255, 0, 0\",\n      icon: <IoLogoFirebase size={iconSize} color={ghost ? \"gray\" : \"red\"} />,\n      description: \"Backend Service\",\n    },\n    {\n      label: \"Next.js\",\n      color: ghost ? \"128, 128, 128\" : \"128, 128, 128\",\n      icon: <RiNextjsFill size={iconSize} color={ghost ? \"gray\" : \"gray\"} />,\n      description: \"React Framework\",\n    },\n    {\n      label: \"React\",\n      color: ghost ? \"128, 128, 128\" : \"0, 128, 128\",\n      icon: <FaReact size={iconSize} color={ghost ? \"gray\" : \"teal\"} />,\n      description: \"JavaScript Library\",\n    },\n    {\n      label: \"Angular\",\n      color: ghost ? \"128, 128, 128\" : \"221, 27, 27\",\n      icon: <FaAngular size={iconSize} color={ghost ? \"gray\" : \"red\"} />,\n      description: \"Web Application Framework\",\n    },\n  ];\n  const skill = Skills.find((skill) => skill.label === tech);\n  if (skill) {\n    if (size === \"md\") {\n      return (\n        <div\n          key={skill.label}\n          className={cn(\n            `flex items-center gap-2 bg-card relative  p-2 rounded-md ${\n              ghost ? \"\" : \"border\"\n            }`,\n            className\n          )}\n        >\n          <div\n            style={{\n              backgroundColor: ghost ? `` : `rgba(${skill.color}, 0.5)`,\n              borderColor: ghost ? `` : `rgba(${skill.color})`,\n            }}\n            className=\"w-10 h-10 opacity-15 relative border items-center  justify-center flex rounded-md\"\n          ></div>{\" \"}\n          <div className=\"absolute left-[20px] \"> {skill.icon}</div>\n          {showLabel && (\n            <div className=\"flex flex-col gap-0\">\n              <h1 className=\"font-bold tracking-tighter\"> {skill.label}</h1>\n              {showDescription && (\n                <p className=\"md:block -mt-[2px]\">{skill.description}</p>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <TooltipProvider key={skill.label}>\n          <Tooltip>\n            <TooltipTrigger>\n              <div\n                style={{\n                  backgroundColor: ghost ? `` : `rgba(${skill.color}, 0.5)`,\n                  borderColor: ghost ? `` : `rgba(${skill.color})`,\n                }}\n                className={`p-1 gap-1 items-center  justify-center flex rounded-md ${\n                  ghost ? \"\" : \"border p-2\"\n                }`}\n              >\n                {\" \"}\n                <div className=\"  \"> {skill.icon}</div>\n                {showLabel && (\n                  <div className=\"flex flex-col\">\n                    <h1 className=\"font-bold tracking-tighter\">\n                      {\" \"}\n                      {skill.label}\n                    </h1>\n                  </div>\n                )}\n              </div>{\" \"}\n            </TooltipTrigger>\n            <TooltipContent>{skill.label}</TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      );\n    }\n  } else {\n    return (\n      <div\n        className={cn(\n          `flex items-center gap-2 border bg-card relative  p-2 rounded-md`\n        )}\n      >\n        <div className=\"w-10 h-10 bg-gray-200 border-gray-500 opacity-15 relative border items-center  justify-center flex rounded-md\"></div>{\" \"}\n        <div className=\"absolute left-[20px] \">\n          <Database size={iconSize} />\n        </div>\n        {showLabel && (\n          <div className=\"flex flex-col\">\n            <h1 className=\"font-bold tracking-tighter\"> {tech}</h1>\n          </div>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default StackCard;\n",
      "type": "registry:ui"
    }
  ]
}